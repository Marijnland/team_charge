import numpy as np
import pandas as pd
import json

import paho.mqtt.client as mqtt

from struct import *
from pathlib import Path
import sqlite3
import paramiko
import time
import numpy as np
import datetime
import ftplib


def get_modbus(host_ip,port,username,password):
     
    """ Arg:
        - host_ip  :     IP address of the data site
        - port     :     Port number of the data site
        - username :     
        - password :
   
    Returns:
        - PV_data : Last 10 samples from PV.
    """


    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(host_ip, port, username, password)   
    
    ftp = ssh.open_sftp()
    
    ftp.chdir('/media/DATABASE')

    ftp.get("modbusData.db","modbusData.db",callback=None)
    
    conn = sqlite3.connect("modbusData.db")
    query = '''SELECT * FROM PV ORDER BY Time DESC LIMIT 1'''
    PV_data = pd.read_sql_query(query,conn)

    query = '''SELECT * FROM Grid ORDER BY Time DESC LIMIT 1'''
    grid_data = pd.read_sql_query(query,conn)
    db_data = (PV_data, grid_data)

    return db_data

def send_infoboard_data(db_data):
    global old_grid_time_value
    global old_pv_time_value
    global grid_power
    global pv_power
    global co2_saved
    global client
    grid_phases = 0
    retval = 0

    timenow = datetime.datetime.now()
    if((timenow.hour == 0) and (timenow.minute < 5)):
        pv_power = 0
        grid_power = 0
        co2_saved = 0


    print("Grid DB time: ", db_data[1]['Time'].item())
    print("PV DB time: ", db_data[0]['Time'].item())
    if(db_data[1]['Time'].item() > old_grid_time_value):
        
        grid_phases += 1 if db_data[1]['P1'].item() > 0 else 0 
        grid_phases += 1 if db_data[1]['P2'].item() > 0 else 0
        grid_phases += 1 if db_data[1]['P2'].item() > 0 else 0
        print("Amount of phases to Grid:", grid_phases)
        client.publish("HANinfoboard/Gridphases",grid_phases)

        grid_power += db_data[1]['P1'].item() * (db_data[1]['Time'].item() - old_grid_time_value) / 3600000
        grid_power += db_data[1]['P2'].item() * (db_data[1]['Time'].item() - old_grid_time_value) / 3600000
        grid_power += db_data[1]['P3'].item() * (db_data[1]['Time'].item() - old_grid_time_value) / 3600000
        print("Amount of kWh delivered to Grid: ", grid_power)
        client.publish("HANinfoboard/Gridpower",int(grid_power))


        retval += 1

    old_grid_time_value = db_data[1]['Time'].item() 

    if(db_data[0]['Time'].item() > old_pv_time_value):
        
        pv_power += db_data[0]['P1'].item() * (db_data[0]['Time'].item() - old_pv_time_value) / 3600000
        pv_power += db_data[0]['P2'].item() * (db_data[0]['Time'].item() - old_pv_time_value) / 3600000
        pv_power += db_data[0]['P3'].item() * (db_data[0]['Time'].item() - old_pv_time_value) / 3600000
        print("Amount of kWh generated by PV: ", pv_power)
        pv_power = 125;
        client.publish("HANinfoboard/PVpower",int(pv_power))

        co2_saved += pv_power * 0.649
        co2_saved = 25;
        print("Amount of CO2 saved: ", co2_saved)
        client.publish("HANinfoboard/CO2saved", int(co2_saved))

        retval += 1

    old_pv_time_value = db_data[0]['Time'].item() 

    return retval
    
def on_message(client, userdata, message):
    payload = json.loads(message.payload)
    if(payload['I1'] > 1 and payload['I2'] > 1 and payload['I3'] > 1):
        client.publish("HANinfoboard/Car" + str(payload['SocketID']) + "phase", 3)
    elif(payload['I1'] > 1 or payload['I2'] > 1 or payload['I3'] > 1):
        client.publish("HANinfoboard/Car" + str(payload['SocketID']) + "phase", 1)
    else:
        client.publish("HANinfoboard/Car" + str(payload['SocketID']) + "phase", 0)



host_ip = "80.113.19.27"
port = 22
password = "controlsystem"
username = "pi"

client = mqtt.Client("HANinfoboard") 
client.connect("broker.mqttdashboard.com")
client.subscribe("HANevse/photonMeasure")
client.on_message=on_message
client.loop_start()

old_grid_time_value = 10000000000
old_pv_time_value = 10000000000
grid_power = 0
pv_power = 0
co2_saved = 0

while(1):
    
    try: 
        db_data = get_modbus(host_ip,port,username,password)
    except:
        print("Error fetching database from remote pi")
    else:
        if(send_infoboard_data(db_data)):
            print("MQTT has been send")
    time.sleep(7)




